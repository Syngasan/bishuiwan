<template>
  <div class="bigBox">
    <div class="header">
      <span>小组详情</span>
      <el-button type="primary" size="small" @click="back()">返回</el-button>
    </div>
    <div class="groupPerson">
      <div class="bigTitle">{{ group.groupName }}
        <i class="el-icon-edit-outline" @click="edit()"></i>
      </div>
      <div class="groupTitle"><span>小组描述</span></div>
       <div class="groupCentant">{{ group.description }} </div>
       <div class="groupTitle"><span>创建人</span></div>
       <div class="personPic">
         <img src="../../images/bg@2x.png">
         <div class="wd" style="margin-left:10px">
           <div class="writer" style="font-size:15px">{{ group.realName }}</div>
          <div class="writerDetail" style="font-size:12px">{{ group.department }}</div>
         </div>
       </div>
       <div class="mTop" style="margin-left:10px;">{{ group.createTime }}</div>
    </div>
    <div class="nav">
      <div class="groupTitle"><span>成员列表</span></div>
      <div class="button_btn mTop">
        <el-button type="primary" size="small" style="height:32px" @click="addUser()">添加</el-button>
        <el-button type="primary" size="small" style="height:32px" @click="downExcal()">下载Excel模板</el-button>
        <el-upload
          style="margin-left:10px"
          class="upload-demo"
          ref="upload"
          :limit=1
          action='http://112.74.105.6:8080/bishuiwan/api/group/importGroupUserExcel'
          multiple
          method:="post"
          :on-preview="handlePreview"
          accept=".xls,.xlsx"
          :http-request="uploadSectionFile"
          :file-list="fileList"
          :auto-upload="false">
          <el-button slot="trigger" size="small" type="primary">导入Excel</el-button>
          <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload">提交</el-button>
        </el-upload>
        <!-- <el-button type="primary" size="small" @click="intoExcal()">提交</el-button>         -->
      </div>
      <el-table
      class="mTop"
        :data="group.groupUser"
        style="width:980px;box-sizing:border-box;padding:0 5px;"
        :row-style="tableRowStyle"
        header-row-class-name="center"
        :header-cell-style="{background:'rgba(66,172,254,1)',width:'980px',height:'55px','text-align':'center'}">
        <el-table-column
          label="小组名称"
          prop="name"
          width="180">
          <!-- <template slot-scope="scope">
            <span style="margin-left: 10px" >{{ scope.row.date }}</span>
          </template> -->
        </el-table-column>
        <el-table-column
          label="小组创建人"
          prop="realName"
          width="180">
          <!-- <template slot-scope="scope">
              <div slot="reference" class="name-wrapper">
                <el-tag size="medium">{{ scope.row.name }}</el-tag>
              </div>
          </template> -->
        </el-table-column>
        <el-table-column label="操作">
          <template slot-scope="scope">

            <el-button
              size="mini"
              type="primary"
              @click="handleDelete(scope.$index, scope.row)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>

    </div>
      <div class="block mt mTop">
        <!-- <el-pagination
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
          :current-page="currentPage4"
          :page-sizes="[100, 200, 300, 400]"
          :page-size="100"
          layout="total, sizes, prev, pager, next, jumper"
          :total="400">
        </el-pagination> -->
      </div>
      <!-- 详情弹窗 -->
      <el-dialog title="" :visible.sync="dialogFormVisible">
        <el-form :model="formEdit">
          <el-form-item label="修改小组名称" :label-width="formLabelWidth">
            <el-input v-model="formEdit.name" autocomplete="off"></el-input>
          </el-form-item>
          <el-form-item label="修改小组描述" :label-width="formLabelWidth">
            <el-input v-model="formEdit.content" autocomplete="off"></el-input>
          </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
          <el-button @click="dialogFormVisible = false">取 消</el-button>
          <el-button type="primary" @click="commitEdit()">确 定</el-button>
        </div>
      </el-dialog>

          <el-dialog
            title="添加成员"
            :visible.sync="dialogVisible1"
            >
          <div class="treeBox">
            <div class="leftTree">
              <el-tree
                :data="data4"
                show-checkbox
                node-key="id"
                :props="prop9"
                :expand-on-click-node="false"
                :default-checked-keys="seltedRights"
                 :default-expanded-keys="[2, 1]"                
                @check-change="check_right_change"
                ref="tree"
                >
                <span class="custom-tree-node" slot-scope="{ node, data }">
                  <span>{{ node.label }}</span>
                  <span>
                    <el-button
                      type="text"
                      size="mini"
                      @click="() => append(data)">
                      设为常选
                    </el-button>
                  </span>
                </span>
              </el-tree>


                                    <div>
                                      <span>常选人员</span>
                                      <el-scrollbar style="height:500px;overflow-x: hidden;">


                                        <el-tree
                                          :data="data6"
                                          show-checkbox
                                          :props="prop11"
                                          @check-change="check_right_change_Common"
                                          ref="treechangxaun"
                                          >
                                          <span class="custom-tree-node" slot-scope="{ node, data }">
                                            <span>{{ node.label }}</span>
                                            <span>
                                              <el-button
                                                type="text"
                                                size="mini"
                                                @click="() => noAppend(data)">
                                                取消常选
                                              </el-button>
                                            </span>
                                          </span>
                                        </el-tree>
                                      </el-scrollbar>

                                        
                                          <el-button @click="commitAdd()" type="primary" size="small" style="text-align:right">提交</el-button>
                                    </div>

                                </div>
              <div class="rightTree">
                <div >
                  <ul v-for="(item,index) in checkList" :key="index">
                    <li>
                      <el-button plain size="small" @click="delDepId(item.id)">{{item.name}}</el-button>
                    </li>
                  </ul>     
                </div>
                <div>
                  <el-scrollbar style="height:100%;overflow-x: hidden;">
                     <ul v-for="(cols,colIndex) in checkListUser" :key="colIndex">
                      <li>
                        <el-button @click="delId(cols.id)" plain size="small">{{cols.realName}}</el-button>
                      </li>
                    </ul>
                  </el-scrollbar>
                 
                </div>
              </div>


            
          </div>
        <!-- <el-button type="primary" size="small" @click="commitAdd()" style="margin-top:10px">提交</el-button> -->

          </el-dialog>
  </div>
</template>
<script>
import {groupDetails,addGroupUser,editGroup,deleteGroupUser,getDepartment,exportGroupModelExcel,importGroupUserExcel,setCommonUser,cancelCommonUser,getCommonUserList} from '@/utils/axios/axios'
export default {
  data () {
    const data4 = [];
    const data6 = [];
    return {
      fileList:[],
      tableData: [],
      data4: JSON.parse(JSON.stringify(data4)),
      data6: JSON.parse(JSON.stringify(data6)),
      ccList:[],
      prop9: {
        value: 'id',
        children: 'children',
        label: 'name'
      }, 
      prop11: {
        value: 'userId',
        label: 'realName'
      },
      seltedRights:[],     
      currentPage4: 4,
      dialogFormVisible: false,
      formEdit: {
        name: '',
        date1: '',
        date2: '',
        delivery: false,
        type: [],
        resource: '',
        desc: '',
        content: ''
      },
      dialogFormVisibleAdd:false,
      formAdd: {
        userId:''
      },
      formLabelWidth: '120px',
      group:[],
      dialogVisible1:false,
      checkList :[],
      checkListUser:[],
      departmentId:'',
      userIds:''
    }
  },
  methods: {
    handleDelete (index, row) {
      console.log(index, row)
      let params ={
        sessionId:localStorage.getItem('sessionId'),
        groupId:this.$route.query.groupId,
        groupUserId:row.id   
      }
      deleteGroupUser(  this.$qs.stringify(params) ).then(res=>{
        console.log(res);
        if (res.code ===1) {
            this.$message({
            message: res.desc,
            type: 'success'
          });
          this.init()
        }
      })
    },
        // 选中标签
    check_right_change() {
      // this.checkList =[]
      // this.checkListUser=[]
      // getCheckedNodes(leafOnly, includeHalfChecked){
      // console.log(43333333333,leafOnly, includeHalfChecked);
      // } 
      // let arr = []
      var arr = this.$refs.tree.getCheckedNodes( ) 
      console.log(arr,'数组' );
        for ( let item of arr ) {
          console.log(item,'区分');
          if(item.series) {            
            this.checkList.push(item)
            let newArr = []
            for( let itemNew of this.checkList) {
              newArr.push(itemNew.id)
              this.checkList = [...new Set(this.checkList)] 
            }
            this.departmentId = newArr.join(',')
            console.log('部门',this.departmentId);
          } else if (item.account) {
            this.checkListUser.push(item)
            let userArr = []
            for(let itemUser of this.checkListUser) {
              userArr.push(itemUser.id)
              this.checkListUser = [...new Set(this.checkListUser)] 
            }
            // this.userIds = userArr.join(',')

            console.log('用户',this.userIds);
          }          
        } 
    },
    // 删除指定用户id
    delId (col)  {
      console.log(col,'===============================',this.checkListUser);
      for ( let i =0;i<this.checkListUser.length;i++) {
        if (this.checkListUser[i].id == col) {
          this.checkListUser.splice(i,1)            
        }
      } 
          console.log(this.checkListUser,'截取数组');
    },
     // 删除部门id
    delDepId(col) {
      for ( let i =0;i<this.checkList.length;i++) {
          if (this.checkList[i].id == col) {
            this.checkList.splice(i,1)              
          }
        } 
    },
        // 追加常选
    append(data) {
          // const newChild = { id: id++, label: 'testtest', children: [] };
          // if (!data.children) {
          //   this.$set(data, 'children', []);
          // }
          // data.children.push(newChild);
          console.log(data,'追加常选');
          // 设为常选人员
          let params = {
              sessionId:localStorage.getItem('sessionId'),
              selectUserId:data.userId
            }
            setCommonUser( this.$qs.stringify(params) ).then(res=>{
              if (res.code ===1 ) {
                console.log(res.desc,'----------------------------------');
                  this.getCommonUserListPeople()
              }
            })
        },
        // 取消常选
        noAppend(data) {
          console.log('取消',data);
          let params = {
              sessionId:localStorage.getItem('sessionId'),
              selectUserId:data.userId
            }
            cancelCommonUser( this.$qs.stringify(params) ).then(res=>{
              if (res.code ===1 ) {
                console.log(res.desc,'----------------------------------');
                  this.getCommonUserListPeople()
              }
            })
        },
    // 指定常选人员
    check_right_change_Common() {
      var arr = this.$refs.treechangxaun.getCheckedNodes( )
      // console.log(arr,'选中的常选');
      let newArr = []
      for(let item of arr ) {
        this.checkListUser.push(item)
        this.checkListUser = [...new Set(this.checkListUser)] 
        // console.log(this.checkListUser);
        // newArr.push(item.userId)
        // newArr = [...new Set(newArr)]
        // console.log(newArr,'常选');



        
      }        // if (this.checkListUser.length != 0) {
        //       this.checkListUser = this.checkListUser.concat(this.ccList)
        //     }
        // this.changxuan=newArr.join(',')
      
        // this.doUserId = this.changxuan+','+this.doUserIds
        // console.log(this.changxuan,'常选',this.doUserId);
      console.log(this.checkListUser,'常选');
      
    },
    getCommonUserListPeople() {
      let params = {
        sessionId: localStorage.getItem('sessionId')
      }
      getCommonUserList( this.$qs.stringify(params) ).then(res=>{
        console.log(res,'常选');    
        if (res.code===1 ) {
          this.data6 = res.data
        }
      })
    },
    handleSizeChange (val) {
      console.log(`每页 ${val} 条`)
    },
    handleCurrentChange (val) {
      console.log(`当前页: ${val}`)
    },
    tableRowStyle ({ row, rowIndex }) {
      return 'background-color: #F2F9FF'
    },
    back () {
      this.$router.go(-1)
    },
    // 添加成员
    addUser() {
      this.dialogVisible1 = true
      this.getCommonUserListPeople()
          let params ={
            sessionId:localStorage.getItem('sessionId'),
          }
      getDepartment( this.$qs.stringify(params) ).then(res=>{
        console.log(res,'部门');
        if ( res.code === 1){
          this.data4 = res.data
          console.log(this.data4,'集团');                   
        }   
      })
    },
    // 提交编辑
    commitEdit () {
      console.log(this.form.name, this.form.content, '小组信息')
      this.dialogFormVisible = false
      this.form.name = ''
      this.form.content = ''
    },
    init () {
      let params = {
        sessionId:localStorage.getItem('sessionId'),
        groupId:this.$route.query.groupId
      }
      groupDetails( this.$qs.stringify(params) ).then(res=>{
        if (res.code  ===1) {
          this.group = res.data
          console.log(this.group,'');
          
        }
  
      })
    },
        // 编辑详情
    edit () {

      this.dialogFormVisible = true
    },
    commitEdit () {
      let params = {
        sessionId:localStorage.getItem('sessionId'),
        groupId:this.$route.query.groupId,
        groupName:this.formEdit.name,
        description:this.formEdit.content
      }
      editGroup( this.$qs.stringify(params) ).then(res=>{
        // console.log(res,'修改小组');
        if (res.code === 1) {
          this.dialogFormVisible = false
          this.init()
        }
      })
      
    },
    commitAdd () {
      let arr = []
      let newArr = []
      for (let item of this.checkListUser ) {
        arr.push(item.id)
        
      }
      for (let items of this.checkList ) {
        newArr.push(items.id)
        
      }
      this.userIds = arr.join(',')
      let params = {
        sessionId:localStorage.getItem('sessionId'),
        groupId:this.$route.query.groupId,
        userIds:this.userIds
      }
      addGroupUser( this.$qs.stringify(params)  ).then(res=> {
        console.log(res,'添加用户');
        if (res.code ===1) {
          this.dialogVisible1 = false
          this.init()
        }
      })
    },
    // 下载excal模板
    downExcal () {
      let params = {
        sessionId:localStorage.getItem('sessionId')
      }
      exportGroupModelExcel( this.$qs.stringify(params) ).then(res=>{
        console.log(res,'下载模板');
        if (res.code ===0) {
          this.$message.error('错误');          
        } else {
                
        let str = 'http://112.74.105.6:8080/bishuiwan/api/group/exportGroupModelExcel?sessionId='+localStorage.getItem('sessionId')
        console.log( str,'跳转链接');
        window.location.href = str
        }
      })
    },
    // 导入excal

    // uploadUrl(){
    //                     var url = 'http://112.74.105.6:8080/bishuiwan/api/group/importGroupUserExcel?sessionId='+localStorage.getItem('sessionId')
    //                     return url;
    //                 },
    //                 handleSuccess(){
    //                     //上传成功要处理的事
    //                 },
                    handlePreview(){
                        //上传前要处理的事
                    },
                    submitUpload() {
                      let list = document.getElementsByClassName('el-upload-list__item is-ready')
                      if(list.length == 0){
                        this.$message({
                          type:'warning',
                          message:"请选择需要导入的模板！"
                        })
                        return;
                      }
                      this.$refs.upload.submit();
                    },
                    uploadSectionFile(param){
                      var fileObj = param.file;
                      // FormData 对象
                      var form = new FormData();
                      // 文件对象
                      form.append("sessionId", localStorage.getItem('sessionId'));
                      form.append("groupUsers", fileObj);
                      console.log(form.get("sessionId"),'文件参数');
                      console.log('文件',fileObj);                      
                      
                      importGroupUserExcel( form ).then(res => {
                        if(res.code == 1){
                          this.$message({
                            type:'success',
                            message:res.desc
                          })
                          this.init()
                          this.fileList =[]
                        } else {
                          this.$message({
                            type:'error',
                            message:res.desc
                          })
                            this.fileList =[]
                        }
                      })
                    },

  },
  mounted () {
    console.log(this.$route.query,'路由参数');
    this.init()
  }
}
</script>
<style lang="scss" scoped>
li {
  list-style: none
}
.bigBox{
  background-color: #F2F9FF;
  width: 100%;
  height: 100%;
  min-height: 750px;
  margin-bottom: 50px;
  box-sizing: border-box;
}
.bigTitle {
  // width:144px;
  height:23px;
  font-size:24px;
  font-family:MicrosoftYaHei;
  font-weight:400;
  color:rgba(35,35,35,1);
  line-height:0px;
  margin-left: 7px;
}
.header {
  display: flex;
  justify-content: space-between;
  padding: 10px;
}
.header span {
  font-size: 18px
}
.groupPerson {
  width:950px;
  height:330px;
  background:rgba(255,255,255,1);
  margin: 0 auto;
  text-align: left;
  padding-top: 10px;
  padding-left: 10px
}
.groupTitle {
  margin-top: 10px;
  border-left: 3px solid #7C72CB;
  font-size: 17px;
  line-height: 30px;
   margin-left: 10px;
}
.groupTitle span {
  margin-left: 10px
}
.groupCentant {
  margin-top: 10px;
  margin-left: 10px;
  font-size: 17px;
}
.personPic {
  margin-top: 10px;
  display: flex;
  justify-content: flex-start;
  margin-left: 10px;
}
.personPic  img{
  width:51px;
  height:51px;
  border-radius:26px;
  overflow: hidden;
}
.mTop {
  margin-top: 15px;
}
.button_btn {
  display: flex;
  justify-content: flex-start;
  margin-left: 10px;
}
.nav {
  text-align: left;
  padding-top: 10px;
  padding-left: 10px
}
.dfCenter {
  display: flex;
  justify-content: center
}
  .checkBox {
    width:217px;
    height:38px;
    // background:rgba(97,97,97,1);
    // background-color: red;
    border: 1px solid black;
    border-radius:5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-sizing:  border-box;
    padding: 0 10px;
  }
  .checkBox_right {
    width:27px;
    height:27px;
    line-height: 27px;
    font-size: 20px;
    vertical-align: middle;
    color: #979797;
    border-radius:50%;
    border: 1px solid black;
  }
  .treeBox {
    position: relative;
  }
  .leftTree {
    display: inline-block;
    // border: 1px solid #000;
    width: 50%;
    // height: 200px;
    border-right: 1px solid black;
  }
  .rightTree {
    margin-left: 50%;
    text-align: left;
    // border: 1px solid #000;
    height: 100%;
    width: 200px;
    overflow-y:auto;
    top: 0;
    position: absolute;
    // right: 0;
  }
</style>
<style>
/* 表格内容样式  自定义组件样式*/
  .cell{
    text-align: center !important;
    /* color: red; */
  }
</style>
